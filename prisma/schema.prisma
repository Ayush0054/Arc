// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String     @id @default(uuid())
  userId    String     @unique
  userName  String
  name      String
  email     String
  phone     String
  goals     Goal[]
  likes     Likes[]
  dislikes  DisLikes[]
  comments  Comments[]
  createdAt DateTime   @default(now())
}

model Goal {
  id               String         @id @default(uuid())
  name             String
  description      String
  type             String
  image            String
  completiontime   DateTime
  progress         GoalProgress[]
  status           String
  profileId        String
  profile          Profile        @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  createdAt        DateTime       @default(now())
  comments         Comments[]
  like             Likes[]
  disLike          DisLikes[]
  isCompleted      Boolean        @default(false)
  completionBanner String

  @@index([profileId])
}

model GoalProgress {
  id        String   @id @default(uuid())
  dateTime  DateTime
  update    String
  goalId    String
  Goal      Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  isChecked Boolean  @default(false)

  @@index([goalId])
}

model Comments {
  id     String @id @default(uuid())
  goalId String
  Goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)

  text      String
  createdAt DateTime @default(now())
  userName  String
  image     String
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [userId], onDelete: Cascade)

  @@index([goalId])
  @@index([profileId])
}

model Likes {
  Id     String @id @default(uuid())
  goalId String
  Goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile  @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([goalId, profileId])
  @@index([goalId])
  @@index([profileId])
}

model DisLikes {
  Id     String @id @default(uuid())
  goalId String
  Goal   Goal   @relation(fields: [goalId], references: [id])

  createdAt DateTime @default(now())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [userId], onDelete: Cascade)

  @@unique([goalId, profileId])
  @@index([goalId])
  @@index([profileId])
}
